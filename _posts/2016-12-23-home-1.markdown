---
title:  "How To Be A Nice CSS Boy"
categories: home-1
---
What is NICE CSS? It's CSS that's considerate to those who will work on a website after you, including your future self. In this way there is no need to differentiate between yourself and others, you can simply be nice.

Is NICE CSS a real thing? No, it's just the name I gave my attempt to understand how to write CSS that isn't a mess and doesn't turn into a mess down the road.

Why should we write NICE CSS? Because it's nice.  

Mostly this article is about attempting to apply principals of computer science — encapsulation, modularity, DRY etc — to the wild, designer infested world of CSS. Of course it's not just designers who write the bad CSS, CS PHDs do too. Everyone is subject to writing bad CSS. Part of the reason is CSS and its partner in crime HTML are super flexible and forgiving, they don't demand much structural integrity from their practitioners. Which is great for beginners and non-experts, but causes problems for non-beginners and experts who're trying to write sensible code. 

I'll be focusing on writing CSS so it's easily maintainable, reusable, and readable — and not really worrying about the aspects of load time, file size, time to first meaningful paint and so forth. Speed is outside of the scope of this investigation. Speed is also occasionally [in conflict with NICE CSS](https://css-tricks.com/authoring-critical-fold-css). If you're interested learning about making sites load fast [this article is insane](https://hackernoon.com/10-things-i-learned-making-the-fastest-site-in-the-world-18a0e1cdf4a7#.us7gkl3vz). And [the site](https://knowitall-9a92e.firebaseapp.com) described therein is super useful. I used it to learn what I didn't know about HTML and CSS. Spoiler I didn't know a lot. I know some more now.

In attempting to write NICE CSS I looked at the methodologies: ITCSS, OOCSS, SMACSS, BEM, and Atomic CSS. Some of them occupy the same space and are conflicting while others are complimentary and can be used together. Roughly: ITCSS is a way of hierarchically organizing your CSS, OOCSS is a technical philosophy, SMACCS is a technical philosophy and a way of organizing your CSS, BEM is a naming convention, and ATOMIC CSS is a method for breaking modularity down to the atomic level. Even among the systems that occupy different spaces there's a fair amount of overlap because fundamentally they're all trying to make you think systematically about your code.

You'll notice that these systems challenge the once sacred, specification endowed wisdoms of *semanticness* and other *best practices*. Here's [an article about that](https://tympanus.net/codrops/2013/01/22/defending-presentational-class-names) and [another one](http://www.stubbornella.org/content/2011/04/28/our-best-practices-are-killing-us).

## ITCSS

ITCSS is a system of organizing your CSS so you'll always know where to put and find things rather than just adding new selectors to the end of a file. This, amongst other benefits, keeps you from getting stuck in weird specificity potholes and avoids source order conflicts because you've arranged the source in a meaningful order. It's specifically intended to help large teams stay on the same page. It was developed by [Harry Roberts](http://csswizardry.com), who anyone who has ever tried to google away their CSS problems will know as CSS Wizardry. 

![itcss]({{ site.baseurl }}/assets/itcss.svg)

The system is depicted in my inverted triangle diagram. In fact the IT stands for inverted triangle. 

As you can see the triangle drills down through the specificity graph. The first two levels, Settings and Tools, are for preprocessor stuff: variables, [mixins, extends](http://csswizardry.com/2014/11/when-to-use-extend-when-to-use-a-mixin), and so forth.

The next level, Generic, is for browser resets. 

Then the Elements layer is where you put all those selectors like `p`, `h1`, and `body` that aren't classes or ids. 

Objects refers to the first O in OOCSS, which is the system we'll talk about next. You put general, reusable, not overly styled, design patterns in here — like maybe a block containing an image and some text. 

In Components we put our more visually designy things like buttons and dotted lines and so forth. 

Finally there's Trumps. The term will be familiar to players of card games in the bridge family and other things. This where we put selectors that we absolutely want to override everything else. Let's say you had some Arabic text that needed to read right to left and you wanted to be absolutely sure that nothing would ever tell it to read left to right, you could put it in here. All these systems hate id selectors due to their tendency to nuke your specificity graph. But Harry says it's ok to put some in trumps.

It's fine to add and subtract new triangle levels to suit your needs. In my travels I came across a concept that works well here. It's called Shames. This is where you put code that doesn't adhere to the principals of nice css. Things you need to refactor. At least they'll be all in one place where it's harder to ignore them. If you're using a version tracker it's easy for everyone on the team to shame each other too. I put it at the bottom of the triangle though I'm not sure that's the best place for it.

There's not a ton of information about ITCSS out there yet as it's pretty new. In fact Harry hasn't even officially launched [the site](http://itcss.io). But there is [a video of Harry talking about it](https://youtu.be/1OKZOV-iLj4), and [a blog post that includes project of his on github](http://www.hongkiat.com/blog/inverted-triangle-css-web-development).

## OOCSS
Object Oriented Cascading Style Sheets is the granddaddy of em all. It all started with [a deceptively simple insight](http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code) by Nicole Sullivan that you could employ a tiny repeatable design pattern consisting of an image and some text to position pretty much every facebook post. It, she says, *saves hundreds of lines of code*. And so it does.

The code looks like this:

```
<div class="media attribution">

  <a href="http://twitter.com/stubbornella" class="img">
    <img src="http://stubbornella.com/profile_image.jpg" alt="me" />
  </a>

  <div class="bd">
    @Stubbornella 14 minutes ago
  </div>

</div>

.media {margin:10px;}
.media, .bd {overflow:hidden; _overflow:visible; zoom:1;}
.media .img {float:left; margin-right: 10px;}
.media .img img{display:block;}
.media .imgExt{float:right; margin-left: 10px;}
```

And thus you have gone a long way towards designing the monster that's eating the fourth estate and pooping out fake news. 

The two main principles of OOCSS are *separate structure from skin* and *separate container from content*. Separating structure from skin means that your declarations regarding things like positioning, size, margins and so forth go in a different ruleset than declarations with fonts, colors, and borders. Separating container from content means that you don't specify whether something is footer content, main content, for a blog, or whatever. If you did that then your CSS wouldn't be reusable.

In practice when writing OOCSS you'll notice that you tend to write rule sets that have one or two declarations rather than three, four, or more. If you find yourself writing novel length works you're probably not thinking in OOCSS.

There's a lot out there about [how specifically OOCSS should be written](https://ianstormtaylor.com/oocss-plus-sass-is-the-best-way-to-css), which is often compelling and worth looking into, but IMO OOCSS really has the most value when appreciated as a principle rather than a collection of rules. Which is also true of a lot of other things. And as you'll see the methodologies to come are increasingly prescriptive and generally work well with OOCSS concepts.

If you want to learn more about OOCSS here's [an intro article](https://www.smashingmagazine.com/2011/12/an-introduction-to-object-oriented-css-oocss) and [the official github](https://github.com/stubbornella/oocss/wiki).

## SMACSS
SMA stand for Scalable and Modular Architecture and is a lot like a combination of ITCSS and OOCSS. There are some particular differences like SMACSS has five categories where ITCSS has seven. SMACSS says sometimes style elements but mostly use classes where OOCSS says never style elements only use classes. They both despise ids, aww.

There's [a whole book](https://smacss.com) written by the inventor of SMACSS, Jonathan Snook, which you can read mostly for free or buy if you are nice and want the premium content. 

There's a bunch of articles [comparing OOCSS and SMACSS](https://www.sitepoint.com/bem-smacss-advice-from-developers) that sometimes get insanely technical and maybe matter but probably doesn't. Your two choices are ultimately not SMACSS vs OOCSS but rather fucking things up vs spending all your time trying to develop the prefect set up that will prevent you from fucking up.

SMACSS is pronounced *smacks* which is fun. ITCSS is pronounced *its* which is confusing. OOCSS is pronounced *ocean*, just kidding.

Here's an [intro to SMACSS](http://vanseodesign.com/css/smacss-introduction) and  [a video about OOCSS, SMACSS, and BEM](https://youtu.be/IKFq2cSbQ4Q), which is where I encountered the concept of Shames.

## BEM
Block__Element--Modifier is a system for naming selectors developed by [the Russian Google](https://www.yandex.com). You could use it on its own and probably extrapolate a system much like OOCSS from it, but many people use it in conjunction with OOCSS or SMACSS. 

BEM is written like this (via [good ol Harry](http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax)):

```
.block {}
.block__element {}
.block--modifier {}

.site-search {} /* Block */
.site-search__field {} /* Element */
.site-search--full {} /* Modifier */

.person {}
.person__hand {}
.person--female {}
.person--male__hand {}
.person__hand--left {}
```

The benefits of BEM are pretty obvious, you can tell what sort of thing a selector is just by reading its name. But! you have to be diligent about thinking in OOCSS or you will write something like this `.footer__contact-info--red-border`. That is incredibly not modular, wow. 

I do think you end up sacrificing a little modularity by using BEM — a modifier is tied to its block when it could be useful elsewhere — but the gains you make in consistency and readability are likely worth it, especially when working with big teams over long periods of time. Having everyone doing things the same way is probably the biggest benefit of adopting any of these systems.

There's [a whole site about BEM](http://getbem.com) you can dig into. Actually there are [two sites about BEM](https://en.bem.info).

## Atomic CSS
Now if you want to talk mega modularity let's talk Atomic CSS shall we? It was unveiled by Thierry Koblentz in his article [Challenging CSS Best Practices](https://www.smashingmagazine.com/2013/10/challenging-css-best-practices-atomic-approach). Atomic is probably not the best for big teams and projects as there's a danger of conflicts if too many people jump in (though Thierry would [disagree](https://twitter.com/thierrykoblentz/status/854461952852074496)). But if you just want to shralp a small site by your lonesome oh boy. The first site I tried to develop using OOCSS principles I ended up writing very atomic-like code without even knowing it. 

With Atomic you write selectors like `.m-t-border` and just slap those puppies all over the place. `m-t-border means medium top border`, you don't even have time to write whole words you're moving so fast. You develop an artisanal of tiny design components that can be applied all over the place and your HTML ends up looking like:

```
<div class="m-t-border float-l bg-dark bricks-flying">
	<img src="kool-aide-man.gif"/>
</div>
```

It's nuts bro. Atomic CSS breaks all the rules, OH YEAH!

UPDATE: I had an interesting if brief [conversation](https://twitter.com/johnpolacek/status/864577530044571650) with [@johnpolacek](https://twitter.com/johnpolacek) on twitter that made me think that I was considering Atomic CSS from too much of an agency perspective where you build lots of unique sites from the ground up, rather than from a product perspective where you're working a lot on one site. From a product pov you can think of your CSS as a toolbox that you use to work on your HTML. So rather than the common workflow of toggling between writing CSS and HTML you set up the CSS beforehand and from then on you're working exclusively in HTML. Atomic CSS with its minute targeted rulesets is ideal for this method. [Buzzfeed](http://solid.buzzfeed.com) and [Marvel](https://marvelapp.com/styleguide/overview/introduction) are both taking this approach.

Here's [an intro to Atomic CSS](https://www.lucidchart.com/techblog/2014/01/31/atomic-css-tool-set) and [the Atomic CSS site](https://acss.io).


## Concluding Musings
If you're writing CSS with no particular organizing principal besides *finish the website* try one of these systems, it will improve your life, probably extremely minutely. If you run a team or a business that builds or maintains websites for god's sake take pity on your employees and adopt one or more of these systems.
